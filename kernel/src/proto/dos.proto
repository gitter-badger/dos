package dos;

// the global rpc status
enum RpcStatus {
  // make rpc successfully
  kRpcOk = 0;
  // fail to prepare rootfs
  kRpcPrepareRootfsFailed = 1;
  // container name or job name exists
  kRpcNameExist = 2;
  kRpcError = 3;
  kRpcNotFound = 4;
}

message User {
  optional int32 uid = 1;
  optional string name = 2;
  optional int32 gid = 3;
  optional uint64 ctime = 4;
}

// resource related descriptor
message Cpu {
  optional uint32 limit = 1;
  optional uint32 share = 2;
  optional uint32 used = 3;
}

message Memory {
  optional uint64 limit = 1;
  optional uint64 used = 2;
}

message Range {
  optional uint32 start = 1;
  optional uint32 end = 2;
}

message Port {

  repeated uint32 ports = 1;
  // port_name will be assigned real port and inject it into enviroment 
  // with same name
  repeated string port_names = 2;

  optional Range range = 3;
}

message Network {
  optional uint32 in_bytes_ps = 1;
  optional uint32 out_bytes_ps = 2;
}

message DiskIO {
  optional uint32 read_bytes_ps = 1;
  optional uint32 write_bytes_ps = 2;
  optional string device = 3;
}

// the resource for service run time
message Resource {
  optional Cpu cpu = 1;
  optional Memory memory = 2;
  optional Port port = 3;
  optional Network network = 4;
  optional DiskIO diskio = 5;
}

message Process {
  repeated string args = 1;
  optional User user = 2;
  repeated string envs = 3;
  optional string cwd = 4;
  optional string pty = 5;
  optional bool running = 6;
  optional int32 pid = 7;
  optional int32 gpid = 8;
  // the process start to run time point
  optional int64 rtime = 9;
  optional bool coredump = 10;
  optional int32 exit_code = 11;
  optional string name = 12;
  optional bool terminal = 13;
}

message Platform {
  optional string os = 1;
  optional string arch = 2;
}

message Root {
  optional string path = 1;
  optional bool readonly = 2;
}

message Mount {
  optional string name = 1;
  optional string path = 2;
  optional string type = 3;
  optional string source = 5;
  optional string destination = 6;
  repeated string options = 7;
}

message Device {
  optional string path = 1;
  optional int32 type = 2;
  optional int32 major = 3;
  optional int32 minor = 4;
  optional string permissions = 5;
  optional int32 mode = 6;
  optional int32 uid = 7;
  optional int32 gid = 8;
}

enum NodeState {
  kNodeNormal = 0;
  kNodeOffline = 1;
  kNodeFrozen = 2;
}

message NodeMeta {
  optional string ip = 1;
  optional string hostname = 2;
  optional string endpoint = 3;
  optional Resource resource = 4;
}

enum ContainerType {
  // use system rootfs
  kSystem = 0;
  // use docker image
  kDocker = 1;
  // use oci rootfs
  kOci = 2;
}

message Container {
  optional Resource requirement = 1;
  // opencontainer format or docker image
  optional string image = 2;
  optional string tag = 3;
  // the image download url
  optional string uri = 4;
  optional ContainerType type = 5;
  optional bool enable_ns = 6;
  // no process related with it
  optional bool reserved = 7;
}

enum PodType {
  kPodBatch = 0;
  kPodLongrun = 1;
  kPodSystem = 2;
}

message PodSpec {
  repeated Container containers = 1;
  // the max log count that stored on agent
  optional int32 log_size = 2;
}

message JobSpec {
  optional string name = 1;
  optional uint32 replica = 2;
  optional uint32 deploy_step_size = 3;
  optional uint32 update_step_size = 4;
  optional PodSpec pod = 5;
  optional string version = 6;
}

enum JobState {
  kJobNormal = 0;
  kJobRemoved = 1;
}

message JobStatus {
  optional string name = 1;
  optional JobState state = 2;
  // the user who creates the job
  optional string user_name = 3;
  // the create time
  optional int64 ctime = 4;
  // the update time
  optional int64 utime = 5;
  optional JobSpec desc = 6;
}

enum PodSchedStage {
  // in master pending queue
  kPodSchedStagePending = 0;
  // scheduler has scheduled it
  kPodSchedStageRunning = 1;
  // agent report it death, only agent can change
  // podschedstage to death
  kPodSchedStageDeath = 2;
  // mark pod removed when scale down or 
  // delete job
  kPodSchedStageRemoved = 3;
}

// the real running state in agent
// eg pending, deploying, running , death
enum PodState {
  // pending is agent deploy queue
  kPodPending = 0;
  // deploy all containers in pod
  // any of containers being in kContainerPulling
  // will make pod being kPodDeploying
  kPodDeploying = 1;
  // all containers in pods are running
  kPodRunning = 2;
  // core , oom or exit
  kPodDeath = 3;
}


message PodLog {
  optional string name = 1;
  optional PodState state_from = 2;
  optional PodState state_to = 3;
  optional int64 time = 4;
  optional string msg = 5;
}

message PodStatus {
  optional string name = 1;
  repeated ContainerStatus cstatus = 2;
  optional PodSpec desc = 3;
  optional PodSchedStage stage = 4;
  optional PodState state = 5;
  // latest sched time, only master update it when scheduler schedules a pod
  optional int64 sched_time = 6;
  // the time that is consumed on download package
  // and launch initd, only agent updates it
  optional int64 boot_time = 7;
  // the time that put pod in pending queue
  optional int64 start_pending_time = 8;
  // the endpoint where pod runs on
  optional string endpoint = 9;
}

message NodeStatus {
  optional Resource used = 1;
  repeated PodStatus pstatus = 2;
  optional NodeState state = 3;
  optional NodeMeta meta = 4;
  // check node hearbeat timeout task id
  optional int64 task_id = 5;
  optional int32 version = 6;
  optional Resource assigned = 7;
}

enum ContainerState {
  kContainerPending = 0;
  // pull image from image server
  kContainerPulling = 1;
  // start initd process
  kContainerBooting = 2;
  // run container task command
  kContainerRunning = 3;
  // task exit with 0
  kContainerCompleted = 4;
  // task was killed -9
  kContainerKilled = 5;
  // when main process exit, the container can be remained
  kContainerReserved = 6;
  // the end state when some errors happened
  kContainerError = 7;
}

message ContainerLog {
  optional string name = 1;
  optional ContainerState cfrom = 2;
  optional ContainerState cto = 3;
  optional int64 time = 4;
  optional string msg = 5;
}

message ContainerStatus {
  optional string name  = 1;
  optional int64 start_time = 2;
  optional Resource used = 3;
  optional ContainerState state = 4;
  optional ContainerType type = 5;
  optional int64 boot_time = 6;
}


